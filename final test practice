#include <MsTimer2.h>
#include <LSM303.h>

#define test_pin 43
#define A0pin A0
#define SIpin 23
#define CLKpin 22
#define NPIXELS 128

#define ENA 6
#define IN1 7
#define IN2 8
#define IN3 9
#define IN4 10
#define ENB 11

#define base_speed 80
#define Grid_Size 0.5

float imu_heading_target_angle = 90;  
float imu_kp_yaw = 0.31;            
float imu_kd_yaw = 0.5;              
float imu_yaw_error = 0.0;           
float imu_yaw_error_old = 0.0;      
float imu_pid_out;                  
float imu_yaw_target;              

LSM303 compass;

byte Pixel[NPIXELS];
byte Threshold_Data[NPIXELS];

int LineSensor_Data[NPIXELS];
int LineSensor_Data_Adaption[NPIXELS];
int MAX_LineSensor_Data[NPIXELS];
int MIN_LineSensor_Data[NPIXELS];
int flag_line_adapation;

long encoder_left_pulse = 0;         
long encoder_right_pulse = 0;       
long encoder_left_prev = 0;          
long encoder_right_prev = 0;         

const int IMG_WIDTH_HALF = 64;
const int BASE_SPEED = 80;
const float KP = 6.0;
const float KD = 0.3;
float old_error = 0.0;

#define FASTADC 1
#define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))
#define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))

float robot_distance = 0.0;
float wheel_length = 20.0;
int pulses_per_rev = 360;

int mission_flag = 0;
int function_flag = 0;

struct Waypoint 
{
  double distance;
  double heading_angle;
};

Waypoint waypoints[9];
int waypoint_x = 0;

void setup() 
{
  encoder_reset();               
  reset_IMU();                   
  MsTimer2::set(20, MsTimer2_ISR);
  MsTimer2::start();

  for (int i = 0; i < NPIXELS; i++) 
  {
    LineSensor_Data[i] = 0;
    LineSensor_Data_Adaption[i] = 0;
    MAX_LineSensor_Data[i] = 1023;
    MIN_LineSensor_Data[i] = 0;
  }

  pinMode(SIpin, OUTPUT);
  pinMode(CLKpin, OUTPUT);
  pinMode(A0pin, INPUT);

  digitalWrite(SIpin, LOW);
  digitalWrite(CLKpin, LOW);

#if FASTADC
  sbi(ADCSRA, ADPS2);
  cbi(ADCSRA, ADPS1);
  cbi(ADCSRA, ADPS0);
#endif

  flag_line_adapation = 0;

  pinMode(test_pin, OUTPUT);

  Serial.begin(115200);

  waypoints[0] = {0, 0};
  waypoints[1] = {2 * Grid_Size, 0};
  waypoints[2] = {0, -90};
  waypoints[3] = {1 * Grid_Size, 0};
  waypoints[4] = {0, 90};
  waypoints[5] = {1 * Grid_Size, 0};
  waypoints[6] = {0, 90};
  waypoints[7] = {1 * Grid_Size, 0};
  waypoints[8] = {0, 0};
}

void encoder_reset() 
{
  encoder_left_pulse = 0;
  encoder_right_pulse = 0;
  encoder_left_prev = 0;
  encoder_right_prev = 0;
}

void MsTimer2_ISR() 
{
  switch (function_flag) 
  {
    case 1:
      line_follower();
      break;
    case 2:
      yaw_control();
      break;
    case 3:
    default:
      motor_control(0, 0);
      break;
  }
}

void motor_l(int speed) 
{
  if (speed >= 0) 
  {
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);
    analogWrite(ENA, speed);
  } 
  else 
  {
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    analogWrite(ENA, -speed);
  }
}

void motor_r(int speed) 
{
  if (speed >= 0) 
  {
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, HIGH);
    analogWrite(ENB, speed);
  } 
  else 
  {
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);
    analogWrite(ENB, -speed);
  }
}

void motor_control(int speed_left, int speed_right) 
{
  motor_l(speed_left);
  motor_r(speed_right);
}

void reset_IMU() 
{
  compass.init(); 
  delay(100);     
  compass.read(); 
  Serial.println("IMU 리셋.");
}

void read_line_camera(void)
{
  int i;
  digitalWrite(CLKpin, LOW);
  digitalWrite(SIpin, HIGH);
  digitalWrite(CLKpin,HIGH);
  digitalWrite(SIpin,  LOW);
  delayMicroseconds(1);

  for (i = 0; i < NPIXELS; i++)
  {
    Pixel[i] = analogRead(A0pin) / 4;
    digitalWrite(CLKpin, LOW);
    delayMicroseconds(1);
    digitalWrite(CLKpin, HIGH);
  }
  digitalWrite(CLKpin, LOW);
}

void update_robot_distance() 
{
  long left_delta = encoder_left_pulse - encoder_left_prev;
  long right_delta = encoder_right_pulse - encoder_right_prev;

  float avg_pulse = (left_delta + right_delta) / 2.0;
  robot_distance += (avg_pulse / pulses_per_rev) * wheel_length;

  Serial.print("거리 : ");
  Serial.println(robot_distance);

  encoder_left_prev = encoder_left_pulse;
  encoder_right_prev = encoder_right_pulse;
}

void yaw_control() 
{
  float error_yaw_d;
  int speed_left;
  int speed_right;

  compass.read();
  float imu_heading_angle = compass.heading();

  imu_yaw_error = imu_yaw_target - imu_heading_angle;
  if (imu_yaw_error > 180) imu_yaw_error -= 360;
  else if (imu_yaw_error < -180) imu_yaw_error += 360;

  error_yaw_d = imu_yaw_error - imu_yaw_error_old;
  imu_pid_out = imu_kp_yaw * imu_yaw_error + imu_kd_yaw * error_yaw_d;
  imu_yaw_error_old = imu_yaw_error;

  speed_left = base_speed + (int)imu_pid_out;
  speed_right = base_speed - (int)imu_pid_out;

  motor_control(speed_left, speed_right);
}

void threshold_line_image(int threshold_value)
{
  digitalWrite(test_pin, HIGH);
  for (int i = 0; i < NPIXELS; i++)
  {
    if (Pixel[i] >= threshold_value)
    {
      Threshold_Data[i] = 255;
    } else {
      Threshold_Data[i] = 0;
    }
  }
  digitalWrite(test_pin, LOW);
}

double line_COM(void)
{
  double COM = 0.0;
  double mass_sum = 0.0;

  for (int i = 0; i < NPIXELS; i++)
  {
    mass_sum += Threshold_Data[i];
    COM += Threshold_Data[i] * i;
  }

  if (mass_sum == 0)
  {
    return -1;
  }

  COM = COM / mass_sum;
  return COM;
}

void line_control(int line_center)
{
  int error = line_center - IMG_WIDTH_HALF;
  int derivative = error - old_error;
  float output = KP * error + KD * derivative;
  int speed_difference = int(output);

  int speed_right = BASE_SPEED - speed_difference;
  int speed_left  = BASE_SPEED + speed_difference;

  speed_left = constrain(speed_left, 0, 100);
  speed_right = constrain(speed_right, 0, 100);

  motor_control(speed_left, speed_right);
  old_error = error;
}

void line_follower() 
{
  double cx = 64;
  read_line_camera();
  threshold_line_image(150);
  cx = line_COM();
  line_control(cx);
}

void loop()
{
  switch (mission_flag)
  {
    case 0: 
      motor_control(0, 0);
      delay(500);
      encoder_reset();
      robot_distance = 0.0;
      reset_IMU(); 
      function_flag = 1; 
      mission_flag = 1;
      break;

    case 1:
      if (robot_distance >= waypoints[waypoint_x].distance)
      {
        function_flag = 3; 
        delay(500);
        reset_IMU(); 
        imu_yaw_target = waypoints[waypoint_x].heading_angle + compass.heading(); 
        function_flag = 2; 
        mission_flag = 2;
      }
      else
      {
        line_follower(); 
      }
      break;

    case 2: 
      yaw_control(); 
      if (abs(imu_yaw_error) < 3) 
      {
        function_flag = 3; 
        delay(500);
        encoder_reset();
        mission_flag = 3;
      }
      break;

    case 3: 
      motor_control(0, 0);
      delay(500); 
      waypoint_x++; 
      if (waypoint_x >= 9) 
      {
        mission_flag = 4; 
      }
      else
      {
        mission_flag = 1; 
      }
      break;

    case 4: 
      motor_control(0, 0); 
      while (1); 
      break;
  }
}
